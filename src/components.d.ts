/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AddRemoveBtn {
        "boxChecked": boolean;
        "color": string;
    }
    interface MyCheckbox {
        "group": string;
        "key": number;
        "name": string;
        "onMyChange": (value: string) => void;
        "role": string;
    }
    interface MyFilter {
    }
    interface ResultBtn {
        "name": string;
        "resultOnChange": () => void;
    }
    interface SortBtn {
        "name": string;
        "sortOnChange": () => void;
    }
}
export interface MyCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyCheckboxElement;
}
export interface ResultBtnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLResultBtnElement;
}
export interface SortBtnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSortBtnElement;
}
declare global {
    interface HTMLAddRemoveBtnElement extends Components.AddRemoveBtn, HTMLStencilElement {
    }
    var HTMLAddRemoveBtnElement: {
        prototype: HTMLAddRemoveBtnElement;
        new (): HTMLAddRemoveBtnElement;
    };
    interface HTMLMyCheckboxElement extends Components.MyCheckbox, HTMLStencilElement {
    }
    var HTMLMyCheckboxElement: {
        prototype: HTMLMyCheckboxElement;
        new (): HTMLMyCheckboxElement;
    };
    interface HTMLMyFilterElement extends Components.MyFilter, HTMLStencilElement {
    }
    var HTMLMyFilterElement: {
        prototype: HTMLMyFilterElement;
        new (): HTMLMyFilterElement;
    };
    interface HTMLResultBtnElement extends Components.ResultBtn, HTMLStencilElement {
    }
    var HTMLResultBtnElement: {
        prototype: HTMLResultBtnElement;
        new (): HTMLResultBtnElement;
    };
    interface HTMLSortBtnElement extends Components.SortBtn, HTMLStencilElement {
    }
    var HTMLSortBtnElement: {
        prototype: HTMLSortBtnElement;
        new (): HTMLSortBtnElement;
    };
    interface HTMLElementTagNameMap {
        "add-remove-btn": HTMLAddRemoveBtnElement;
        "my-checkbox": HTMLMyCheckboxElement;
        "my-filter": HTMLMyFilterElement;
        "result-btn": HTMLResultBtnElement;
        "sort-btn": HTMLSortBtnElement;
    }
}
declare namespace LocalJSX {
    interface AddRemoveBtn {
        "boxChecked"?: boolean;
        "color"?: string;
    }
    interface MyCheckbox {
        "group"?: string;
        "key"?: number;
        "name"?: string;
        "onCheckEvent"?: (event: MyCheckboxCustomEvent<any>) => void;
        "onMyChange"?: (value: string) => void;
        "role"?: string;
    }
    interface MyFilter {
    }
    interface ResultBtn {
        "name"?: string;
        "onResultCheckEvent"?: (event: ResultBtnCustomEvent<any>) => void;
        "resultOnChange"?: () => void;
    }
    interface SortBtn {
        "name"?: string;
        "onSortCheckEvent"?: (event: SortBtnCustomEvent<any>) => void;
        "sortOnChange"?: () => void;
    }
    interface IntrinsicElements {
        "add-remove-btn": AddRemoveBtn;
        "my-checkbox": MyCheckbox;
        "my-filter": MyFilter;
        "result-btn": ResultBtn;
        "sort-btn": SortBtn;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-remove-btn": LocalJSX.AddRemoveBtn & JSXBase.HTMLAttributes<HTMLAddRemoveBtnElement>;
            "my-checkbox": LocalJSX.MyCheckbox & JSXBase.HTMLAttributes<HTMLMyCheckboxElement>;
            "my-filter": LocalJSX.MyFilter & JSXBase.HTMLAttributes<HTMLMyFilterElement>;
            "result-btn": LocalJSX.ResultBtn & JSXBase.HTMLAttributes<HTMLResultBtnElement>;
            "sort-btn": LocalJSX.SortBtn & JSXBase.HTMLAttributes<HTMLSortBtnElement>;
        }
    }
}
